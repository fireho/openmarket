require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails APIs to keep things simple and stable.

RSpec.describe "/products", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Product. As you add validations to Product, be sure to
  # adjust the attributes here as well.
  let(:valid_drink_attributes) {
    Fabricate.build(:drink).attributes
  }

  let(:valid_food_attributes) {
    Fabricate.build(:food).attributes
  }

  let(:invalid_attributes) {
    { name: nil, brand: nil }
  }

  describe "GET /index" do
    it "renders a successful response" do
      Product.create! valid_drink_attributes
      get products_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response for a drink" do
      product = Product.create! valid_drink_attributes
      get product_url(product)
      expect(response).to be_successful
    end

    it "renders a successful response for food" do
      product = Product.create! valid_food_attributes
      get product_url(product)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_product_url
      expect(response).to be_successful
    end

    it "renders a successful response with type=Drink" do
      get new_product_url(type: 'Drink')
      expect(response).to be_successful
    end

    it "renders a successful response with type=Food" do
      get new_product_url(type: 'Food')
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      product = Product.create! valid_drink_attributes
      get edit_product_url(product)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid drink parameters" do
      it "creates a new Drink" do
        expect {
          post products_url, params: { product: valid_drink_attributes }
        }.to change(Product, :count).by(1)
        expect(Product.last.class).to eq(Drink)
      end

      it "redirects to the created product" do
        post products_url, params: { product: valid_drink_attributes }
        expect(response).to redirect_to(product_url(Product.last))
      end
    end

    context "with valid food parameters" do
      it "creates a new Food" do
        expect {
          post products_url, params: { product: valid_food_attributes }
        }.to change(Product, :count).by(1)
        expect(Product.last._type).to eq('Food')
      end

      it "redirects to the created product" do
        post products_url, params: { product: valid_food_attributes }
        expect(response).to redirect_to(product_url(Product.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Product" do
        expect {
          post products_url, params: { product: invalid_attributes }
        }.to change(Product, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post products_url, params: { product: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        { name: "New Product Name" }
      }

      it "updates the requested product" do
        product = Product.create! valid_drink_attributes
        patch product_url(product), params: { product: new_attributes }
        product.reload
        expect(product.name).to eq("New Product Name")
      end

      it "redirects to the product" do
        product = Product.create! valid_drink_attributes
        patch product_url(product), params: { product: new_attributes }
        product.reload
        expect(response).to redirect_to(product_url(product))
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        product = Product.create! valid_drink_attributes
        patch product_url(product), params: { product: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested product" do
      product = Product.create! valid_drink_attributes
      expect {
        delete product_url(product)
      }.to change(Product, :count).by(-1)
    end

    it "redirects to the products list" do
      product = Product.create! valid_drink_attributes
      delete product_url(product)
      expect(response).to redirect_to(products_url)
    end
  end
end
